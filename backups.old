void Visit(const koopa_raw_binary_t &binary, const uint32_t use_count = 0)
{
    std::string reg;
    if (reg_stack.empty())
        assert(false);
    reg = reg_stack.top();
    reg_stack.pop();
    reg_map.insert({(koopa_raw_binary_t *)&binary, reg});
    if (reg_count.find(reg) == reg_count.end() && use_count)
        reg_count.insert({reg, use_count});
    else if (use_count)
        reg_count[reg] = use_count;

    // 现在只考虑二元运算的左右值是BINARY还是INTEGER, 在这儿得到左右值在转换为asm形式时对应的字符串
    bool lhs_is_binary = binary.lhs->kind.tag == KOOPA_RVT_BINARY;
    bool rhs_is_binary = binary.rhs->kind.tag == KOOPA_RVT_BINARY;
    bool lhs_is_zero = false, rhs_is_zero = false;
    std::string lhs, rhs;
    if (lhs_is_binary)
        lhs = reg_map[(koopa_raw_binary_t *)&(binary.lhs->kind.data.binary)];
    else
    {
        if (binary.lhs->kind.data.integer.value == 0)
            lhs_is_zero = true;
        lhs = std::to_string(binary.lhs->kind.data.integer.value);
    }
    if (rhs_is_binary)
        rhs = reg_map[(koopa_raw_binary_t *)&(binary.rhs->kind.data.binary)];
    else
    {
        if (binary.rhs->kind.data.integer.value == 0)
            rhs_is_zero = true;
        rhs = std::to_string(binary.rhs->kind.data.integer.value);
    }

    switch (binary.op)
    {
    case KOOPA_RBO_EQ:
    case KOOPA_RBO_NOT_EQ:
        if (lhs_is_binary)
        {
            if (rhs_is_binary)
                std::cout << std::setw(6) << "xor" << reg << ", " << lhs << ", " << rhs << std::endl;
            else
                std::cout << std::setw(6) << "xori" << reg << ", " << lhs << ", " << rhs << std::endl;
        }
        else
        {
            if (rhs_is_binary)
                std::cout << std::setw(6) << "xori" << reg << ", " << rhs << ", " << lhs << std::endl;
            else
            {
                int32_t result;
                if (binary.op == KOOPA_RBO_EQ)
                    result = binary.lhs->kind.data.integer.value == binary.rhs->kind.data.integer.value;
                if (binary.op == KOOPA_RBO_NOT_EQ)
                    result = binary.lhs->kind.data.integer.value != binary.rhs->kind.data.integer.value;
                std::cout << std::setw(6) << "li" << reg << ", " << result << std::endl;
            }
        }
        if (lhs_is_binary || rhs_is_binary)
            std::cout << std::setw(6) << ir_asm_binaryop[binary.op] << reg << ", " << reg << std::endl;
        break;
    case KOOPA_RBO_MUL:
    case KOOPA_RBO_DIV:
    case KOOPA_RBO_MOD:
    case KOOPA_RBO_GT:
    case KOOPA_RBO_LT:
    case KOOPA_RBO_LE:
    case KOOPA_RBO_GE:
    case KOOPA_RBO_SUB:
    case KOOPA_RBO_SHL:
    case KOOPA_RBO_SHR:
    case KOOPA_RBO_SAR:
        if (binary.op == KOOPA_RBO_DIV && rhs_is_zero)
            assert(false);
        if (!lhs_is_binary && !rhs_is_binary)
        {
            int32_t result;
            if (binary.op == KOOPA_RBO_MUL)
                result = binary.lhs->kind.data.integer.value * binary.rhs->kind.data.integer.value;
            if (binary.op == KOOPA_RBO_SUB)
                result = binary.lhs->kind.data.integer.value - binary.rhs->kind.data.integer.value;
            if (binary.op == KOOPA_RBO_DIV)
                result = binary.lhs->kind.data.integer.value / binary.rhs->kind.data.integer.value;
            if (binary.op == KOOPA_RBO_MOD)
                result = binary.lhs->kind.data.integer.value % binary.rhs->kind.data.integer.value;
            if (binary.op == KOOPA_RBO_GT)
                result = binary.lhs->kind.data.integer.value > binary.rhs->kind.data.integer.value;
            if (binary.op == KOOPA_RBO_LT)
                result = binary.lhs->kind.data.integer.value < binary.rhs->kind.data.integer.value;
            if (binary.op == KOOPA_RBO_GE)
                result = binary.lhs->kind.data.integer.value >= binary.rhs->kind.data.integer.value;
            if (binary.op == KOOPA_RBO_LE)
                result = binary.lhs->kind.data.integer.value <= binary.rhs->kind.data.integer.value;
            if (binary.op == KOOPA_RBO_SHL)
                result = binary.lhs->kind.data.integer.value << binary.rhs->kind.data.integer.value;
            if (binary.op == KOOPA_RBO_SHR)
                result = (u_int32_t)binary.lhs->kind.data.integer.value >> binary.rhs->kind.data.integer.value;
            if (binary.op == KOOPA_RBO_SAR)
                result = binary.lhs->kind.data.integer.value >> binary.rhs->kind.data.integer.value;
            std::cout << std::setw(6) << "li" << reg << ", " << result << std::endl;
            break;
        }
        if (!lhs_is_zero && !lhs_is_binary)
        {
            lhs = Visit(binary.lhs->kind.data.integer);
        }
        if (!rhs_is_binary && !rhs_is_zero)
        {
            rhs = Visit(binary.rhs->kind.data.integer);
            reg_stack.push(rhs);
        }
        if (lhs_is_zero)
            lhs = "x0";
        if (rhs_is_zero)
            rhs = "x0";
        std::cout << std::setw(6) << ir_asm_binaryop[binary.op] << reg << ", " << lhs << ", " << rhs << std::endl;
        if (binary.op == KOOPA_RBO_LE || binary.op == KOOPA_RBO_GE)
            std::cout << std::setw(6) << "seqz" << reg << ", " << reg << std::endl;
        if (!lhs_is_zero && !lhs_is_binary)
            reg_stack.push(lhs);
        break;
    case KOOPA_RBO_AND:
    case KOOPA_RBO_OR:
    case KOOPA_RBO_XOR:
    case KOOPA_RBO_ADD:
        int32_t result;
        if (binary.op == KOOPA_RBO_ADD)
            result = binary.lhs->kind.data.integer.value + binary.rhs->kind.data.integer.value;
        if (binary.op == KOOPA_RBO_XOR)
            result = binary.lhs->kind.data.integer.value ^ binary.rhs->kind.data.integer.value;
        if (binary.op == KOOPA_RBO_AND)
            result = binary.lhs->kind.data.integer.value & binary.rhs->kind.data.integer.value;
        if (binary.op == KOOPA_RBO_OR)
            result = binary.lhs->kind.data.integer.value | binary.rhs->kind.data.integer.value;
        if (lhs_is_binary)
        {
            if (rhs_is_binary)
                std::cout << std::setw(6) << ir_asm_binaryop[binary.op] << reg << ", " << lhs << ", " << rhs << std::endl;
            else
                std::cout << std::setw(6) << std::string(ir_asm_binaryop[binary.op]) + 'i' << reg << ", " << lhs << ", " << rhs << std::endl;
        }
        else
        {
            if (rhs_is_binary)
                std::cout << std::setw(6) << std::string(ir_asm_binaryop[binary.op]) + 'i' << reg << ", " << rhs << ", " << lhs << std::endl;
            else
                std::cout << std::setw(6) << "li" << reg << ", " << result << std::endl;
        }
        break;
    };
    if (lhs_is_binary)
    {
        reg_count[lhs]--;
        if (reg_count[lhs] == 0)
        {
            reg_stack.push(lhs);
        }
    }
    if (rhs_is_binary)
    {
        reg_count[rhs]--;
        if (reg_count[rhs] == 0)
        {
            reg_stack.push(rhs);
        }
    }
}